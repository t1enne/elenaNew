---
import { useTranslations } from "../i18n/utils";
import { defaultLang, languages } from "../i18n/ui";
import CloseIcon from "./icons/CloseIcon.astro";

const lang = (Astro.params.lang as keyof typeof languages) || defaultLang;
const t = useTranslations(lang);

const links = [
  { href: `/${lang}/home`, label: t("nav.home") },
  { href: `/${lang}/work`, label: t("nav.works") },
  { href: `/${lang}/about`, label: t("nav.about") },
  { href: `/${lang}/contacts`, label: t("nav.contact") },
];
---

<div class="header sticky top-0 z-10 bg-secondary">
  <nav class="nav" :aria-expanded="navOpen ? true : false">
    <ul>
      {
        links.map((link) => (
          <li @click="navOpen = false">
            <a href={link.href}>{link.label}</a>
          </li>
        ))
      }
      <li>
        <button
          id="theme-toggle"
          type="button"
          @click="$store.darkMode.toggle()">light/dark</button
        >
      </li>
    </ul>
    <select id="lang-selector" value={lang}>
      {
        Object.keys(languages).map((langKey) => {
          return (
            <option
              value={langKey}
              selected={langKey === lang ? "selected" : null}
            >
              {langKey}
            </option>
          );
        })
      }
    </select>
  </nav>
  <div class="nav-wrap relative p-4 z-50">
    <div class="flex justify-between">
      <div>
        <h4 class="text-xl font-serif font-bold">Elena Kustova</h4>
      </div>
      <button id="open-menu" @click="navOpen = !navOpen">
        <span>MENU</span>
      </button>
    </div>
  </div>
</div>

<style lang="scss">
  .header {
    height: var(--header-h);
    &:has(> nav[aria-expanded="false"]) {
      background-color: transparent;
    }

    .nav {
      @apply fixed bg-secondary;
      top: 0;
      width: 100vw;
      height: fit-content;
      min-height: 50vh;
      transform: translateY(-100%);
      transition: transform var(--nav-anim-dur) ease;

      &[aria-expanded="true"] {
        transform: translateY(calc(0% + var(--header-h)));
        li {
          opacity: 0;
          animation: fadeIn var(--nav-anim-dur) cubic-bezier(0.17, 0.84, 0.44, 1) forwards;
        }
      }

      ul {
        @apply w-fit px-4;
        &:hover {
          > li {
            @apply text-gray-500;
          }
        }
        > li { 
          > a, button {
            @apply inline-block font-medium uppercase py-2;
            &:hover {
              color: var(--text-color);
            }
          }
        }
      }
    }
  }

  select {
    display: none;
  }

  @keyframes fadeIn {
    from {
      transform: translateY(2rem);
      opacity: 0;
    }
    to {
      transform: translateY(0rem);
      opacity: 1;
    }
  }

  $indexes: 1, 2, 3, 4, 5, 6;
  @each $idx in $indexes {
    nav > ul > li:nth-child(#{$idx}) {
      animation-delay: calc(75ms * #{$idx}) !important;
    }
  }
</style>
<script>
  const select: HTMLSelectElement = document.querySelector("#lang-selector")!;
  const nav: HTMLElement = document.querySelector("nav")!;

  select.addEventListener("change", () => {
    window.location.assign(window.location.href.replace(/en|ru/, select.value));
  });

  window.addEventListener("load", () => {
    const { height } = nav.getBoundingClientRect();
    document.documentElement.style.setProperty("--nav-h", `${height}px`);
  });
</script>
