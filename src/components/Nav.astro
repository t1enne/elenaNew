---
import { useTranslations } from "../i18n/utils";
import { defaultLang, languages } from "../i18n/ui";
import MenuIcon from "./icons/MenuIcon.astro";
import SunAndMoonIcon from "./icons/SunAndMoonIcon.astro";

const lang = (Astro.params.lang as keyof typeof languages) || defaultLang;
const t = useTranslations(lang);

const links = [
  { href: `/${lang}/home`, label: t("nav.home") },
  // { href: `/${lang}/work`, label: t("nav.works") },
  { href: `/${lang}/about`, label: t("nav.about") },
  { href: `/${lang}/contacts`, label: t("nav.contact") },
];
---
<nav class="-main-nav z-10 flex flex-col justify-end bg-secondary" :aria-expanded="navOpen ? true : false">
  <ul>
    {
    links.map((link) => (
      <li @click="navOpen = false">
        <a class="w-full font-bold text-4xl" x-data :class={`window.location.pathname == '${link.href}' && 'disabled'`} href={link.href}>{link.label}</a>
      </li>
    ))
    }
    <li class="mt-6">
      <button
        id="theme-toggle"
        type="button"
        @click="$store.darkMode.toggle()">
        <div class="flex gap-4">
          <span> theme </span>
          <span> <SunAndMoonIcon /> </span>
        </div>
      </button>
    </li>
  </ul>
  <select id="lang-selector" value={lang}>
    {
    Object.keys(languages).map((langKey) => {
      return (
        <option
          value={langKey}
          selected={langKey === lang ? "selected" : null}
        >
          {langKey}
        </option>
      );
    })
    }
  </select>
</nav>
<div class="header w-screen fixed bottom-0 z-10">
  <div class="nav-wrap flex justify-between items-center relative h-full z-50 px-12">
    <div>
      <h4 class="text-xl font-serif font-bold">Logo</h4>
    </div>
    <button id="open-menu" class="flex items-center gap-4 py-2 px-6 rounded-full shadow-xl bg-accent border border-accent_2" @click="navOpen = !navOpen">
      <div class="text-sm">MENU</div>
      <MenuIcon />
    </button>
  </div>
</div>

<style lang="scss">
  .header {
    height: var(--header-h);
  }
  nav.-main-nav {
    @apply fixed;
    width: 100dvw;
    height: 100dvh;
    transform: translateY(-100%);
    transition: transform var(--nav-anim-dur) ease;

    a.disabled {
      pointer-events: none;
      text-decoration-line: line-through;
    }
    &[aria-expanded="true"] {
      transform: translateY(0%);
      li {
        opacity: 0;
        animation: fadeIn var(--nav-anim-dur) cubic-bezier(0.17, 0.84, 0.44, 1) forwards;
      }
    }

    ul {
      @apply w-fit px-4 pt-2;
      padding-bottom: calc(var(--header-h) * 1.5);
      &:hover {
        > li {
          @apply text-gray-500;
        }
      }
      > li { 
        > a, button {
          @apply inline-block font-medium uppercase py-2;
          &:hover {
            color: var(--text-color);
          }
        }
      }
    }
  }

  select {
    display: none;
  }

  @keyframes fadeIn {
    from {
      transform: translateY(2rem);
      opacity: 0;
    }
    to {
      transform: translateY(0rem);
      opacity: 1;
    }
  }

  $indexes: 1, 2, 3, 4, 5, 6;
  @each $idx in $indexes {
    nav > ul > li:nth-child(#{$idx}) {
      animation-delay: calc(75ms * #{$idx}) !important;
    }
  }
</style>
<script>
  const select: HTMLSelectElement = document.querySelector("#lang-selector")!;
  const nav: HTMLElement = document.querySelector("nav")!;

  select.addEventListener("change", () => {
    window.location.assign(window.location.href.replace(/en|ru/, select.value));
  });

  window.addEventListener("load", () => {
    const { height } = nav.getBoundingClientRect();
    document.documentElement.style.setProperty("--nav-h", `${height}px`);
  });
</script>
